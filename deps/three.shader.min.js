var THREE = require("THREE");
THREE.CopyShader={uniforms:{tDiffuse:{type:"t",value:null},opacity:{type:"f",value:1}},vertexShader:"varying vec2 vUv;\nvoid main() {\nvUv = uv;\ngl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n}",fragmentShader:"uniform float opacity;\nuniform sampler2D tDiffuse;\nvarying vec2 vUv;\nvoid main() {\nvec4 texel = texture2D( tDiffuse, vUv );\ngl_FragColor = opacity * texel;\n}"};THREE.EffectComposer=function(a,c){this.renderer=a;if(void 0===c){var d=a.getPixelRatio();c=new THREE.WebGLRenderTarget(Math.floor(a.context.canvas.width/d)||1,Math.floor(a.context.canvas.height/d)||1,{minFilter:THREE.LinearFilter,magFilter:THREE.LinearFilter,format:THREE.RGBFormat,stencilBuffer:!1})}this.renderTarget1=c;this.renderTarget2=c.clone();this.writeBuffer=this.renderTarget1;this.readBuffer=this.renderTarget2;this.passes=[];void 0===THREE.CopyShader&&console.error("THREE.EffectComposer relies on THREE.CopyShader");
this.copyPass=new THREE.ShaderPass(THREE.CopyShader)};
THREE.EffectComposer.prototype={swapBuffers:function(){var a=this.readBuffer;this.readBuffer=this.writeBuffer;this.writeBuffer=a},addPass:function(a){this.passes.push(a)},insertPass:function(a,c){this.passes.splice(c,0,a)},render:function(a){this.writeBuffer=this.renderTarget1;this.readBuffer=this.renderTarget2;var c=!1,d,b,e=this.passes.length;for(b=0;b<e;b++)if(d=this.passes[b],d.enabled){d.render(this.renderer,this.writeBuffer,this.readBuffer,a,c);if(d.needsSwap){if(c){var f=this.renderer.context;
f.stencilFunc(f.NOTEQUAL,1,4294967295);this.copyPass.render(this.renderer,this.writeBuffer,this.readBuffer,a);f.stencilFunc(f.EQUAL,1,4294967295)}this.swapBuffers()}d instanceof THREE.MaskPass?c=!0:d instanceof THREE.ClearMaskPass&&(c=!1)}},reset:function(a){if(void 0===a){a=this.renderTarget1.clone();var c=renderer.getPixelRatio();a.width=Math.floor(this.renderer.context.canvas.width/c);a.height=Math.floor(this.renderer.context.canvas.height/c)}this.renderTarget1=a;this.renderTarget2=a.clone();this.writeBuffer=
this.renderTarget1;this.readBuffer=this.renderTarget2},setSize:function(a,c){var d=this.renderTarget1.clone();d.width=a;d.height=c;this.reset(d)}};THREE.RenderPass=function(a,c,d,b,e){this.scene=a;this.camera=c;this.overrideMaterial=d;this.clearColor=b;this.clearAlpha=void 0!==e?e:1;this.oldClearColor=new THREE.Color;this.oldClearAlpha=1;this.clear=this.enabled=!0;this.needsSwap=!1};
THREE.RenderPass.prototype={render:function(a,c,d,b){this.scene.overrideMaterial=this.overrideMaterial;this.clearColor&&(this.oldClearColor.copy(a.getClearColor()),this.oldClearAlpha=a.getClearAlpha(),a.setClearColor(this.clearColor,this.clearAlpha));a.render(this.scene,this.camera,d,this.clear);this.clearColor&&a.setClearColor(this.oldClearColor,this.oldClearAlpha);this.scene.overrideMaterial=null}};THREE.MaskPass=function(a,c){this.scene=a;this.camera=c;this.clear=this.enabled=!0;this.inverse=this.needsSwap=!1};
THREE.MaskPass.prototype={render:function(a,c,d,b){b=a.context;b.colorMask(!1,!1,!1,!1);b.depthMask(!1);var e,f;this.inverse?(e=0,f=1):(e=1,f=0);b.enable(b.STENCIL_TEST);b.stencilOp(b.REPLACE,b.REPLACE,b.REPLACE);b.stencilFunc(b.ALWAYS,e,4294967295);b.clearStencil(f);a.render(this.scene,this.camera,d,this.clear);a.render(this.scene,this.camera,c,this.clear);b.colorMask(!0,!0,!0,!0);b.depthMask(!0);b.stencilFunc(b.EQUAL,1,4294967295);b.stencilOp(b.KEEP,b.KEEP,b.KEEP)}};
THREE.ClearMaskPass=function(){this.enabled=!0};THREE.ClearMaskPass.prototype={render:function(a,c,d,b){a=a.context;a.disable(a.STENCIL_TEST)}};THREE.ShaderPass=function(a,c){this.textureID=void 0!==c?c:"tDiffuse";this.uniforms=THREE.UniformsUtils.clone(a.uniforms);this.material=new THREE.ShaderMaterial({defines:a.defines||{},uniforms:this.uniforms,vertexShader:a.vertexShader,fragmentShader:a.fragmentShader});this.renderToScreen=!1;this.needsSwap=this.enabled=!0;this.clear=!1;this.camera=new THREE.OrthographicCamera(-1,1,1,-1,0,1);this.scene=new THREE.Scene;this.quad=new THREE.Mesh(new THREE.PlaneBufferGeometry(2,2),null);this.scene.add(this.quad)};
THREE.ShaderPass.prototype={render:function(a,c,d,b){this.uniforms[this.textureID]&&(this.uniforms[this.textureID].value=d);this.quad.material=this.material;this.renderToScreen?a.render(this.scene,this.camera):a.render(this.scene,this.camera,c,this.clear)}};